{
  "version": 3,
  "sources": ["../oauth-callback-detector.js"],
  "sourcesContent": ["/* global chrome */\n\n/**\n * OAuth Callback Detector Content Script\n * \n * This script runs on OAuth callback pages to detect when the Web client OAuth flow \n * completes successfully or fails. It sends messages back to the extension to signal \n * completion of the Web OAuth flow.\n */\n\nconsole.log('[OAuth Callback Detector] Script loaded on:', window.location.href);\n\n// Check if this is an OAuth callback page by looking for common OAuth parameters\nfunction isOAuthCallbackPage() {\n  const url = new URL(window.location.href);\n  const params = url.searchParams;\n  \n  // Check for OAuth success parameters\n  const hasCode = params.has('code');\n  const hasState = params.has('state');\n  \n  // Check for OAuth error parameters\n  const hasError = params.has('error');\n  \n  const isOAuth = hasCode || hasError || hasState;\n  if (isOAuth) {\n    console.log('[OAuth Callback Detector] Detected OAuth callback page');\n  }\n  \n  return isOAuth;\n}\n\n// Extract OAuth result from URL parameters\nfunction extractOAuthResult() {\n  const url = new URL(window.location.href);\n  const params = url.searchParams;\n  \n  if (params.has('error')) {\n    return {\n      success: false,\n      error: params.get('error'),\n      errorDescription: params.get('error_description'),\n      state: params.get('state')\n    };\n  }\n  \n  if (params.has('code')) {\n    return {\n      success: true,\n      code: params.get('code'),\n      state: params.get('state')\n    };\n  }\n  \n  return null;\n}\n\n// Check for enhanced STAMP OAuth success signals\nfunction detectStampOAuthSuccess() {\n  const pageTitle = document.title;\n  const urlHash = window.location.hash;\n  \n  // Check for STAMP_OAUTH_SUCCESS in document title\n  const hasStampSuccessTitle = pageTitle.includes('STAMP_OAUTH_SUCCESS');\n  \n  // Check for #STAMP_OAUTH_SUCCESS in URL hash\n  const hasStampSuccessHash = urlHash.includes('STAMP_OAUTH_SUCCESS');\n  \n  if (hasStampSuccessTitle || hasStampSuccessHash) {\n    console.log('[OAuth Callback Detector] STAMP OAuth success detected via:', {\n      title: hasStampSuccessTitle ? pageTitle : null,\n      hash: hasStampSuccessHash ? urlHash : null\n    });\n    \n    return {\n      success: true,\n      method: 'stamp_enhanced',\n      detectedVia: hasStampSuccessTitle ? 'title' : 'hash',\n      userEmail: null // Will be extracted separately if needed\n    };\n  }\n  \n  return null;\n}\n\n// Look for success/error indicators in the page content\nfunction detectPageContent() {\n  const bodyText = document.body ? document.body.textContent.toLowerCase() : '';\n  const bodyHTML = document.body ? document.body.innerHTML : '';\n  \n  // Success indicators - updated for backend OAuth completion page\n  const successPhrases = [\n    'successfully authorized',\n    'authorization successful',\n    'access granted',\n    'authentication complete',\n    'you have been authenticated',\n    'installation complete',\n    'setup successful',\n    'oauth complete',\n    'authentication success',\n    'gmail add-on installation complete',\n    'installation successful',\n    'oauth flow completed',\n    'refresh token stored',\n    'stamp_oauth_success' // Add lowercase version for content detection\n  ];\n  \n  // Error indicators  \n  const errorPhrases = [\n    'authorization failed',\n    'access denied',\n    'authentication failed',\n    'error occurred',\n    'installation failed',\n    'unauthorized_client',\n    'invalid_request',\n    'oauth error',\n    'installation error'\n  ];\n  \n  const successMatches = successPhrases.filter(phrase => bodyText.includes(phrase));\n  const errorMatches = errorPhrases.filter(phrase => bodyText.includes(phrase));\n  \n  if (successMatches.length > 0) {\n    console.log('[OAuth Callback Detector] Found success indicators:', successMatches);\n  }\n  if (errorMatches.length > 0) {\n    console.log('[OAuth Callback Detector] Found error indicators:', errorMatches);\n  }\n  \n  const hasSuccessPhrase = successMatches.length > 0;\n  const hasErrorPhrase = errorMatches.length > 0;\n  \n  // Try to extract user email from page content if available\n  let userEmail = null;\n  \n  // Look for email patterns in the page\n  const emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g;\n  const emailMatches = bodyHTML.match(emailRegex);\n  \n  if (emailMatches && emailMatches.length > 0) {\n    // Use the first email found (usually the user's email)\n    userEmail = emailMatches[0];\n    console.log('[OAuth Callback Detector] Found user email:', userEmail);\n  }\n  \n  // Check for success/error in page title as well\n  const pageTitle = document.title.toLowerCase();\n  const titleSuccess = successPhrases.some(phrase => pageTitle.includes(phrase));\n  const titleError = errorPhrases.some(phrase => pageTitle.includes(phrase));\n  \n  if (hasSuccessPhrase || titleSuccess) {\n    console.log('[OAuth Callback Detector] SUCCESS detected');\n    return { success: true, method: 'content', userEmail: userEmail };\n  }\n  \n  if (hasErrorPhrase || titleError) {\n    console.log('[OAuth Callback Detector] ERROR detected');\n    return { success: false, method: 'content', error: 'Page indicates authentication failed' };\n  }\n  \n  return null;\n}\n\n// Send message to extension background script\nfunction notifyExtension(result) {\n  console.log('[OAuth Callback Detector] Sending result to extension:', result.success ? 'SUCCESS' : 'FAILED');\n  \n  // Send message to background script\n  chrome.runtime.sendMessage({\n    type: 'OAUTH_WEB_CLIENT_COMPLETE',\n    result: result,\n    url: window.location.href,\n    timestamp: new Date().toISOString()\n  }, (response) => {\n    if (chrome.runtime.lastError) {\n      console.log('[OAuth Callback Detector] Message send error (expected):', chrome.runtime.lastError.message);\n    } else {\n      console.log('[OAuth Callback Detector] Message sent successfully');\n    }\n  });\n}\n\n// Main detection logic\nfunction detectOAuthCompletion() {\n  console.log('[OAuth Callback Detector] Starting detection on:', window.location.href);\n  \n  // PRIORITY 1: Check for enhanced STAMP OAuth success signals (most reliable)\n  const stampResult = detectStampOAuthSuccess();\n  if (stampResult) {\n    console.log('[OAuth Callback Detector] Found STAMP OAuth success signal');\n    notifyExtension(stampResult);\n    return;\n  }\n  \n  // PRIORITY 2: Check URL parameters (traditional OAuth flow)\n  if (isOAuthCallbackPage()) {\n    const urlResult = extractOAuthResult();\n    if (urlResult) {\n      console.log('[OAuth Callback Detector] Found result in URL parameters');\n      notifyExtension(urlResult);\n      return;\n    }\n  }\n  \n  // PRIORITY 3: Check page content (fallback method)\n  const contentResult = detectPageContent();\n  if (contentResult) {\n    console.log('[OAuth Callback Detector] Found result in page content');\n    notifyExtension(contentResult);\n    return;\n  }\n  \n  console.log('[OAuth Callback Detector] No OAuth completion detected');\n}\n\n// Wait for page to be fully loaded before checking\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', detectOAuthCompletion);\n} else {\n  // Page already loaded\n  detectOAuthCompletion();\n}\n\n// Also check after a short delay to catch dynamic content\nsetTimeout(() => {\n  detectOAuthCompletion();\n}, 2000);\n\n// Monitor for URL changes (single page apps)\nlet lastUrl = location.href;\nnew MutationObserver(() => {\n  const currentUrl = location.href;\n  if (currentUrl !== lastUrl) {\n    lastUrl = currentUrl;\n    console.log('[OAuth Callback Detector] URL changed, re-checking:', currentUrl);\n    setTimeout(detectOAuthCompletion, 500);\n  }\n}).observe(document, { subtree: true, childList: true });\n\n// Monitor for hash changes (for #STAMP_OAUTH_SUCCESS detection)\nlet lastHash = location.hash;\nwindow.addEventListener('hashchange', () => {\n  const currentHash = location.hash;\n  if (currentHash !== lastHash) {\n    lastHash = currentHash;\n    console.log('[OAuth Callback Detector] Hash changed, re-checking:', currentHash);\n    setTimeout(detectOAuthCompletion, 100);\n  }\n});\n\n// Monitor for title changes (for STAMP_OAUTH_SUCCESS detection)\nlet lastTitle = document.title;\nconst titleObserver = new MutationObserver(() => {\n  const currentTitle = document.title;\n  if (currentTitle !== lastTitle) {\n    lastTitle = currentTitle;\n    console.log('[OAuth Callback Detector] Title changed, re-checking:', currentTitle);\n    setTimeout(detectOAuthCompletion, 100);\n  }\n});\ntitleObserver.observe(document.querySelector('title') || document.head, { \n  childList: true, \n  subtree: true, \n  characterData: true \n});\n\n// Listen for messages from the extension (for cleanup)\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.type === 'OAUTH_DETECTOR_CLEANUP') {\n    console.log('[OAuth Callback Detector] Cleanup requested');\n    sendResponse({ success: true });\n  }\n});\n\nconsole.log('[OAuth Callback Detector] Setup complete, monitoring for OAuth completion'); "],
  "mappings": "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",
  "names": []
}
