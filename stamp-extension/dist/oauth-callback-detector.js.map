{
  "version": 3,
  "sources": ["../oauth-callback-detector.js"],
  "sourcesContent": ["/* global chrome */\r\n\r\n/**\r\n * OAuth Callback Detector Content Script\r\n * \r\n * This script runs on OAuth callback pages to detect when the Web client OAuth flow \r\n * completes successfully or fails. It sends messages back to the extension to signal \r\n * completion of the Web OAuth flow.\r\n */\r\n\r\nconsole.log('[OAuth Callback Detector] Script loaded on:', window.location.href);\r\nconsole.log('[OAuth Callback Detector] Script version: 2.0 - Enhanced logging enabled');\r\nconsole.log('[OAuth Callback Detector] Current URL matches pattern:', window.location.href.includes('70h4jbuv95.execute-api.us-east-2.amazonaws.com'));\r\n\r\n// Check if this is an OAuth callback page by looking for common OAuth parameters\r\nfunction isOAuthCallbackPage() {\r\n  const url = new URL(window.location.href);\r\n  const params = url.searchParams;\r\n  \r\n  // Check for OAuth success parameters\r\n  const hasCode = params.has('code');\r\n  const hasState = params.has('state');\r\n  \r\n  // Check for OAuth error parameters\r\n  const hasError = params.has('error');\r\n  \r\n  const isOAuth = hasCode || hasError || hasState;\r\n  if (isOAuth) {\r\n    console.log('[OAuth Callback Detector] Detected OAuth callback page');\r\n  }\r\n  \r\n  return isOAuth;\r\n}\r\n\r\n// Extract OAuth result from URL parameters\r\nfunction extractOAuthResult() {\r\n  const url = new URL(window.location.href);\r\n  const params = url.searchParams;\r\n  \r\n  if (params.has('error')) {\r\n    return {\r\n      success: false,\r\n      error: params.get('error'),\r\n      errorDescription: params.get('error_description'),\r\n      state: params.get('state')\r\n    };\r\n  }\r\n  \r\n  if (params.has('code')) {\r\n    return {\r\n      success: true,\r\n      code: params.get('code'),\r\n      state: params.get('state')\r\n    };\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n// Check for enhanced STAMP OAuth success signals\r\nfunction detectStampOAuthSuccess() {\r\n  const urlHash = window.location.hash;\r\n  let userEmail = null;\r\n\r\n  // Check for #STAMP_OAUTH_SUCCESS in URL hash\r\n  const hasStampSuccessHash = urlHash.includes('STAMP_OAUTH_SUCCESS');\r\n\r\n  if (hasStampSuccessHash) {\r\n    // New logic: Parse email from the hash string\r\n    try {\r\n      // Use URLSearchParams to easily parse the hash string (after removing '#')\r\n      const hashParams = new URLSearchParams(urlHash.substring(1));\r\n      userEmail = hashParams.get('user_email');\r\n    } catch (e) {\r\n      console.error('[OAuth Callback Detector] Error parsing URL hash:', e);\r\n    }\r\n\r\n    console.log('[OAuth Callback Detector] STAMP OAuth success signal detected via URL hash.');\r\n    if (userEmail) {\r\n      console.log('[OAuth Callback Detector] Extracted user email from hash:', userEmail);\r\n    } else {\r\n      console.warn('[OAuth Callback Detector] Success signal found in hash, but user_email parameter was missing.');\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      method: 'stamp_enhanced_hash',\r\n      userEmail: userEmail\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// Look for success/error indicators in the page content\r\nfunction detectPageContent() {\r\n  const bodyText = document.body ? document.body.textContent.toLowerCase() : '';\r\n  \r\n  // Success indicators - updated for backend OAuth completion page\r\n  const successPhrases = [\r\n    'successfully authorized',\r\n    'authorization successful',\r\n    'access granted',\r\n    'authentication complete',\r\n    'you have been authenticated',\r\n    'installation complete',\r\n    'setup successful',\r\n    'oauth complete',\r\n    'authentication success',\r\n    'gmail add-on installation complete',\r\n    'installation successful',\r\n    'oauth flow completed',\r\n    'refresh token stored',\r\n    'stamp_oauth_success' // Add lowercase version for content detection\r\n  ];\r\n  \r\n  // Error indicators  \r\n  const errorPhrases = [\r\n    'authorization failed',\r\n    'access denied',\r\n    'authentication failed',\r\n    'error occurred',\r\n    'installation failed',\r\n    'unauthorized_client',\r\n    'invalid_request',\r\n    'oauth error',\r\n    'installation error'\r\n  ];\r\n  \r\n  const successMatches = successPhrases.filter(phrase => bodyText.includes(phrase));\r\n  const errorMatches = errorPhrases.filter(phrase => bodyText.includes(phrase));\r\n  \r\n  if (successMatches.length > 0) {\r\n    console.log('[OAuth Callback Detector] Found success indicators:', successMatches);\r\n  }\r\n  if (errorMatches.length > 0) {\r\n    console.log('[OAuth Callback Detector] Found error indicators:', errorMatches);\r\n  }\r\n  \r\n  const hasSuccessPhrase = successMatches.length > 0;\r\n  const hasErrorPhrase = errorMatches.length > 0;\r\n  \r\n  // Check for success/error in page title as well\r\n  const pageTitle = document.title.toLowerCase();\r\n  const titleSuccess = successPhrases.some(phrase => pageTitle.includes(phrase));\r\n  const titleError = errorPhrases.some(phrase => pageTitle.includes(phrase));\r\n  \r\n  if (hasSuccessPhrase || titleSuccess) {\r\n    console.log('[OAuth Callback Detector] SUCCESS detected via page content (fallback)');\r\n    // Note: We can't reliably get the email with this method, so it will be null.\r\n    return { success: true, method: 'content', userEmail: null };\r\n  }\r\n  \r\n  if (hasErrorPhrase || titleError) {\r\n    console.log('[OAuth Callback Detector] ERROR detected');\r\n    return { success: false, method: 'content', error: 'Page indicates authentication failed' };\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n// Send message to extension background script\r\nfunction notifyExtension(result) {\r\n  console.log('[OAuth Callback Detector] Sending result to extension:', result.success ? 'SUCCESS' : 'FAILED');\r\n  \r\n  // Send message to background script\r\n  chrome.runtime.sendMessage({\r\n    type: 'OAUTH_WEB_CLIENT_COMPLETE',\r\n    result: result,\r\n    url: window.location.href,\r\n    timestamp: new Date().toISOString()\r\n  }, (response) => {\r\n    if (chrome.runtime.lastError) {\r\n      console.log('[OAuth Callback Detector] Message send error (expected):', chrome.runtime.lastError.message);\r\n    } else {\r\n      console.log('[OAuth Callback Detector] Message sent successfully');\r\n    }\r\n  });\r\n}\r\n\r\n// Main detection logic\r\nfunction detectOAuthCompletion() {\r\n  console.log('[OAuth Callback Detector] Starting detection on:', window.location.href);\r\n  \r\n  // PRIORITY 1: Check for enhanced STAMP OAuth success signals (most reliable)\r\n  const stampResult = detectStampOAuthSuccess();\r\n  if (stampResult) {\r\n    console.log('[OAuth Callback Detector] Found STAMP OAuth success signal');\r\n    notifyExtension(stampResult);\r\n    return;\r\n  }\r\n  \r\n  // PRIORITY 2: Check URL parameters (traditional OAuth flow)\r\n  if (isOAuthCallbackPage()) {\r\n    const urlResult = extractOAuthResult();\r\n    if (urlResult) {\r\n      console.log('[OAuth Callback Detector] Found result in URL parameters');\r\n      notifyExtension(urlResult);\r\n      return;\r\n    }\r\n  }\r\n  \r\n  // PRIORITY 3: Check page content (fallback method)\r\n  const contentResult = detectPageContent();\r\n  if (contentResult) {\r\n    console.log('[OAuth Callback Detector] Found result in page content');\r\n    notifyExtension(contentResult);\r\n    return;\r\n  }\r\n  \r\n  console.log('[OAuth Callback Detector] No OAuth completion detected');\r\n}\r\n\r\n// Wait for page to be fully loaded before checking\r\nif (document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', detectOAuthCompletion);\r\n} else {\r\n  // Page already loaded\r\n  detectOAuthCompletion();\r\n}\r\n\r\n// Also check after a short delay to catch dynamic content\r\nsetTimeout(() => {\r\n  detectOAuthCompletion();\r\n}, 2000);\r\n\r\n// Monitor for URL changes (single page apps)\r\nlet lastUrl = location.href;\r\nnew MutationObserver(() => {\r\n  const currentUrl = location.href;\r\n  if (currentUrl !== lastUrl) {\r\n    lastUrl = currentUrl;\r\n    console.log('[OAuth Callback Detector] URL changed, re-checking:', currentUrl);\r\n    setTimeout(detectOAuthCompletion, 500);\r\n  }\r\n}).observe(document, { subtree: true, childList: true });\r\n\r\n// Monitor for hash changes (for #STAMP_OAUTH_SUCCESS detection)\r\nlet lastHash = location.hash;\r\nwindow.addEventListener('hashchange', () => {\r\n  const currentHash = location.hash;\r\n  if (currentHash !== lastHash) {\r\n    lastHash = currentHash;\r\n    console.log('[OAuth Callback Detector] Hash changed, re-checking:', currentHash);\r\n    setTimeout(detectOAuthCompletion, 100);\r\n  }\r\n});\r\n\r\n// Monitor for title changes (for STAMP_OAUTH_SUCCESS detection)\r\nlet lastTitle = document.title;\r\nconst titleObserver = new MutationObserver(() => {\r\n  const currentTitle = document.title;\r\n  if (currentTitle !== lastTitle) {\r\n    lastTitle = currentTitle;\r\n    console.log('[OAuth Callback Detector] Title changed, re-checking:', currentTitle);\r\n    setTimeout(detectOAuthCompletion, 100);\r\n  }\r\n});\r\ntitleObserver.observe(document.querySelector('title') || document.head, { \r\n  childList: true, \r\n  subtree: true, \r\n  characterData: true \r\n});\r\n\r\n// Listen for messages from the extension (for cleanup)\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.type === 'OAUTH_DETECTOR_CLEANUP') {\r\n    console.log('[OAuth Callback Detector] Cleanup requested');\r\n    sendResponse({ success: true });\r\n  }\r\n});\r\n\r\nconsole.log('[OAuth Callback Detector] Setup complete, monitoring for OAuth completion');\r\n\r\n// Test if script is working - this should always appear\r\nsetTimeout(() => {\r\n  console.log('[OAuth Callback Detector] TEST: Script is running and functional');\r\n  console.log('[OAuth Callback Detector] TEST: Current page URL:', window.location.href);\r\n  console.log('[OAuth Callback Detector] TEST: Page title:', document.title);\r\n  console.log('[OAuth Callback Detector] TEST: Document ready state:', document.readyState);\r\n}, 1000); "],
  "mappings": "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",
  "names": []
}
